[Project Euler problem
37:](http://projecteuler.net/index.php?section=problems&id=37)

> The number 3797 has an interesting property. Being prime itself, it is
> possible to continuously remove digits from left to right, and remain prime at
> each stage: 3797, 797, 97, and 7. Similarly we can work from right to left:
> 3797, 379, 37, and 3.
>
> Find the sum of the only eleven primes that are both truncatable from left to
> right and right to left.
>
> NOTE: 2, 3, 5, and 7 are not considered to be truncatable primes.

Here's my LISP solution:

    (defun is-truncatable-prime-aux (primes digits func)
      (do ((is-truncatable t))
          ((or (not is-truncatable)
               (null digits))
           is-truncatable)
        (let ((a-number (digits-to-number digits)))
          (setf is-truncatable (aref primes a-number)
                digits (funcall func digits)))))
    
    (defun is-truncatable-prime (primes a-number)
      "Determines is a prime is truncatable (PE 37)"
      (let ((digits (number-to-digits a-number)))
        (and (is-truncatable-prime-aux primes digits #'(lambda (digits)
                                                         (rest digits)))
             (is-truncatable-prime-aux primes digits #'(lambda (digits)
                                                         (nreverse digits)
                                                         (pop digits)
                                                         (nreverse digits))))))
    
    (defun project-euler-37-1 ()
      (let ((truncatable-primes '())
            (num-truncatable-primes 0)
            (primes (sieve-of-eratosthenes 1000000)))
        (loop for a-number from 9 to (1- (array-dimension primes 0)) by 2
              while (< num-truncatable-primes 11) do
          (when (and (aref primes a-number)
                     (is-truncatable-prime primes a-number))
            (push a-number truncatable-primes)
            (incf num-truncatable-primes)))
        (reduce #'+ truncatable-primes)))

[[!tag LISP Project_Euler programming]]
