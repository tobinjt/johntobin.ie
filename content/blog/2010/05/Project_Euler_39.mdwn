[Project Euler problem
39:](http://projecteuler.net/index.php?section=problems&id=39)

> If p is the perimeter of a right angle triangle with integral length sides,
> {a,b,c}, there are exactly three solutions for p = 120.
>
> {20,48,52}, {24,45,51}, {30,40,50}
>
> For which value of p <= 1000 is the number of solutions maximised?

Here's my LISP solution:

    (defun project-euler-39-1 ()
      ; a^2 + b^2 = c^2.  We're going to check all combinations of a and b; if c is
      ; integral and a+b+c <= 1000, increment the count for a+b+c.  Finally take the
      ; perimiter with the largest count.
      ; We don't need to check a > 500, or b > 500, because the perimeter would
      ; exceed 1000.
      (let* ((a-and-b-upper-bound 500)
             (perimiter-upper-bound 1000)
             (perimeter-count (make-array (1+ perimiter-upper-bound) :initial-element 0)))
    
        (dotimes (a a-and-b-upper-bound)
          (unless (zerop a)
            (dotimes (b a)
              (unless (zerop b)
                (let ((c (sqrt (+ (* a a) (* b b)))))
                  (when (integerp c)
                    (let ((perimeter (+ a b c)))
                      (when (<= perimeter perimiter-upper-bound)
                        (incf (aref perimeter-count perimeter))))))))))
    
        (let ((perimiter-seen-most-often)
              (max-perimiter-count 0))
          (dotimes (perimeter perimiter-upper-bound perimiter-seen-most-often)
            (when (> (aref perimeter-count perimeter) max-perimiter-count)
              (setf perimiter-seen-most-often perimeter
                    max-perimiter-count (aref perimeter-count perimeter)))))))

[[!tag LISP Project_Euler programming]]
