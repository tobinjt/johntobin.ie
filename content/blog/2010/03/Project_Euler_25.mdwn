[Project Euler
problem 25:](http://projecteuler.net/index.php?section=problems&id=25)

> The Fibonacci sequence is defined by the recurrence relation:
>     Fn = Fn-1 + Fn-2, where F1 = 1 and F2 = 1.
> Hence the first 12 terms will be:
   
    F1 = 1
    F2 = 1
    F3 = 2
    F4 = 3
    F5 = 5
    F6 = 8
    F7 = 13
    F8 = 21
    F9 = 34
    F10 = 55
    F11 = 89
    F12 = 144
> The 12th term, F12, is the first term to contain three digits.
>
> What is the first term in the Fibonacci sequence to contain 1000 digits?

Here's my LISP solution:

    (defun project-euler-25-1 ()
      (let ((fib-2 1)
            (fib-1 1)
            (fib 0)
            ; The first loop iteration will caclulate F3.
            (num-terms 2)
            (greater-than (expt 10 999)))
        (loop while (< fib greater-than) do
          (setf fib       (+ fib-1 fib-2)
                fib-2     fib-1
                fib-1     fib
                num-terms (1+ num-terms)))
        num-terms))

[[!tag LISP Project_Euler programming]]
