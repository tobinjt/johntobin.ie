[Project Euler
problem 22:](http://projecteuler.net/index.php?section=problems&id=22)


> Using names.txt (right click and 'Save Link/Target As...'), a 46K text file
> containing over five-thousand first names, begin by sorting it into
> alphabetical order. Then working out the alphabetical value for each name,
> multiply this value by its alphabetical position in the list to obtain a name
> score.
>
> For example, when the list is sorted into alphabetical order, COLIN, which is
> worth 3 + 15 + 12 + 9 + 14 = 53, is the 938th name in the list. So, COLIN
> would obtain a score of 938  53 = 49714.
>
> What is the total of all the name scores in the file?

Here's my LISP solution:

    (let ((char-values (make-hash-table))
          (value 0))
      (map nil #'(lambda (x) (setf (gethash x char-values) (incf value)))
               "ABCDEFGHIJKLMNOPQRSTUVWXYZ")
      (defun count-string (a-string)
        (reduce #'+
                (map 'list
                     #'(lambda (x) (gethash x char-values))
                     a-string))))
    
    (defun project-euler-22-1 ()
      (let ((names-string (with-open-file (names #p"names.txt")
                            (read-line names))))
        (loop for i from 0 to (1- (length names-string)) do
          (when (equal #\, (char names-string i))
            (setf (char names-string i) #\ )))
        (let ((names-list (sort (read-from-string (concatenate 'string "(" names-string ")")) #'string<=))
              (current-position 0)
              (total 0))
          (dolist (name names-list total)
            (incf total (* (count-string name) (incf current-position)))))))

[[!tag LISP Project_Euler programming]]
