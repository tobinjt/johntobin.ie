[The fifteenth Project Euler
problem:](http://projecteuler.net/index.php?section=problems&id=15)

> Starting in the top left corner of a 2x2 grid, there are 6 routes (without
> backtracking) to the bottom right corner.
>
> How many routes are there through a 20x20 grid?

I wasn't able to properly solve this problem without research.  Solving it for a
2x2 or even 10x10 grid is simple enough: enumerate every route, and count the
resulting routes.  The problem with that approach is that an n+1xn+1 grid takes
roughly four times as long as an nxn grid, so it's impractical for a 20x20
grid.  The solution is to use [Pascal's
triangle](http://en.wikipedia.org/wiki/Pascal_triangle), which I hadn't heard of
before; rather than explaining it myself, I'll just direct you to [the
informative post I
read](http://blog.functionalfun.net/2008/07/project-euler-problem-15-city-grids-and.html).

Here's my LISP solution:

    (defun project-euler-15-1 (&key (x 20) (y 20))
      (let ((result 1)
            (row (* 2 x)))
        (dotimes (column (1+ y) result)
          (when (not (zerop column))
            ; result = (result * (row + 1 - i)) / i;
            (setf result (/ (* result (- (1+ row) column)) column))))))

[[!tag LISP Project_Euler programming]]
