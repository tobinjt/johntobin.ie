[The second Project Euler
problem:](http://projecteuler.net/index.php?section=problems&id=2)

> Each new term in the Fibonacci sequence is generated by adding the previous
> two terms. By starting with 1 and 2, the first 10 terms will be:
>
> 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
>
> Find the sum of all the even-valued terms in the sequence which do not exceed
> four million.

I thought that the Fibonacci sequence started with 0 and 1, and [Fibonacci
number on Wikipedia](http://en.wikipedia.org/wiki/Fibonacci_number) supports me,
but the answer is unchanged whether you start with (0,1) or (1,2).

Here's my LISP solution:

    ; Create a closure that will return the next Fibonacci number each time it's
    ; called.  I guessed how to write a closure in LISP; I'd prefer to create an
    ; anonymous closure at the start of project-euler-2-1, but I haven't figured
    ; that out yet - I think it's several chapters away in my LISP book.
    (let
      (
        (fib-2 0)
        (fib-1 1)
      )
      (defun fib-next ()
        (let
          (
            (fib-current (+ fib-2 fib-1))
          )
          (setf fib-2 fib-1)
          (setf fib-1 fib-current)
          fib-current
        )
      )
    )
    
    ; I think I could use optional parameters instead of defining an auxilary
    ; function - I'll try that next time.
    (defun project-euler-2-1 ()
      (project-euler-2-1-aux '0)
    )
    
    (defun project-euler-2-1-aux (total)
      (let
        (
          (fib-current (fib-next))
        )
        (cond
          ((> fib-current 4000000)
            total
          )
          ((evenp fib-current)
            (project-euler-2-1-aux (+ total fib-current))
          )
          (t
            (project-euler-2-1-aux total)
          )
        )
      )
    )

The answer is 4613732.

Here's my Perl solution:

    #!/usr/bin/env perl
    
    use strict;
    use warnings;
    
    {
        my ($fib_current, $fib_previous) = (1, 0);
        sub fib_next {
            my $fib_next = $fib_current + $fib_previous;
            $fib_previous = $fib_current;
            $fib_current = $fib_next;
            return $fib_next;
        }
    }
    
    sub project_euler_2 {
        my $total = 0;
    
        my $fib = fib_next();
        while ($fib <= 4000000) {
            if ($fib % 2 == 0) {
                $total += $fib;
            }
            $fib = fib_next();
        }
    
        return $total;
    }
    
    print project_euler_2();

Each program stops executing after it has seen the 35th Fibonacci number,
5702887.

[[!tag Perl LISP Project_Euler programming]]
