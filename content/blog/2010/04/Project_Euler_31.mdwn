[Project Euler
problem 31:](http://projecteuler.net/index.php?section=problems&id=31)

> In England the currency is made up of pound, £, and pence, p, and there are
> eight coins in general circulation:
>
> 1p, 2p, 5p, 10p, 20p, 50p, £1 (100p) and £2 (200p).
>
> It is possible to make £2 in the following way:
>
>     1 x £1 + 1 x 50p + 2 x 20p + 1 x 5p + 1 x 2p + 3 x 1p
>
> How many different ways can £2 be made using any number of coins?

Here's my LISP solution:

    (defun count-possible-coin-combinations (amount list-of-coins)
      (when (null list-of-coins)
        (error "count-possible-coin-combinations: called with empty coin list"))
      (when (zerop amount)
        (error "count-possible-coin-combinations: called with zero amount"))
      (block nil
        (let ((coin (first list-of-coins)))
          (when (null (rest list-of-coins))
            ; This is the last coin.
            (if (not (zerop (mod amount coin)))
                (return 0)
                (return 1)))
          (let ((num-combinations 0))
            (loop for num-coins from 0 to (floor (/ amount coin)) do
              (let ((remaining-amount (- amount (* coin num-coins))))
                (if (zerop remaining-amount)
                    (incf num-combinations)
                    (incf num-combinations (count-possible-coin-combinations remaining-amount (rest list-of-coins))))))
            num-combinations))))
    
    (defun project-euler-31-1 ()
      (count-possible-coin-combinations 200 '(200 100 50 20 10 5 2 1)))

[[!tag LISP Project_Euler programming]]
