[Project Euler
problem 30:](http://projecteuler.net/index.php?section=problems&id=30)

> Surprisingly there are only three numbers that can be written as the sum of
> fourth powers of their digits:
>
>     1634 = 1^4 + 6^4 + 3^4 + 4^4
>     8208 = 8^4 + 2^4 + 0^4 + 8^4
>     9474 = 9^4 + 4^4 + 7^4 + 4^4
> As 1 = 1^4 is not a sum it is not included.
>
> The sum of these numbers is 1634 + 8208 + 9474 = 19316.
>
> Find the sum of all the numbers that can be written as the sum of fifth powers
> of their digits.

Here's my LISP solution:

    (defun increment-list-number (the-number)
      (when (and the-number
                 (first the-number))
        (setf (first the-number) (mod (1+ (first the-number)) 10))
        (when (zerop (first the-number))
          (increment-list-number (rest the-number)))))
    
    (defun project-euler-30-1 ()
      (let ((the-power 5)
            (max-number-to-check)
            (cache (make-array 10))
            (current-number-as-list)
            (matching-numbers '()))
    
        ; Figure out the highest number to check:
        ; it's the first value of (* n (expt 9 the-power)) that's less than an
        ; n-digit number whose digits are all 9.
        (setf max-number-to-check
              (do ((all-nines 9 (+ 9 (* all-nines 10)))
                   (max-sum (expt 9 the-power) (+ max-sum (expt 9 the-power))))
                  ((> all-nines max-sum) max-sum)))
        (loop for i from 0 to the-power do
          (setf current-number-as-list (cons 0 current-number-as-list)))
        (loop for i from 0 to (1- (array-dimension cache 0)) do
          (setf (aref cache i) (expt i the-power)))
    
        (increment-list-number current-number-as-list)
        (increment-list-number current-number-as-list)
        (loop for current-number from 2 to max-number-to-check do
          (let ((total (reduce #'+
                               (mapcar #'(lambda (x) (aref cache x))
                                       current-number-as-list))))
            (when (= total current-number)
              (push current-number matching-numbers)))
          (increment-list-number current-number-as-list))
    
        (reduce #'+ matching-numbers)))

[[!tag LISP Project_Euler programming]]
