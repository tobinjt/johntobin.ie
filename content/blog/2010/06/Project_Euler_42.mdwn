[Project Euler problem
42:](http://projecteuler.net/index.php?section=problems&id=42)

> The nth term of the sequence of triangle numbers is given by, tn = Â½n(n+1); so
> the first ten triangle numbers are:
>
> 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
>
> By converting each letter in a word to a number corresponding to its
> alphabetical position and adding these values we form a word value. For
> example, the word value for SKY is 19 + 11 + 25 = 55 = t10. If the word value
> is a triangle number then we shall call the word a triangle word.
>
> Using words.txt (right click and 'Save Link/Target As...'), a 16K text file
> containing nearly two-thousand common English words, how many are triangle
> words?

Here's my LISP solution:

    (defun project-euler-42-1 ()
      "Calculate each word's value and check if it's a triangle number."
      (let ((triangle-numbers (make-hash-table))
            (largest-triangle-number 0)
            (largest-triangle-number-n 0)
            (num-triangle-words 0))
        (dolist (word (read-comma-delimited-file #p"words.txt") num-triangle-words)
          (let ((sum (sum-alphabetic-positions word)))
            ; Calculate triangle numbers until one exceeds sum.
            (do ()
                ((>= largest-triangle-number sum))
              (incf largest-triangle-number-n)
              (setf largest-triangle-number (calculate-triangle-number largest-triangle-number-n))
              (setf (gethash largest-triangle-number triangle-numbers) t))
            (when (gethash sum triangle-numbers)
              (incf num-triangle-words))))))
    
    (defun letter-to-alphabetical-position (letter)
      "Return the alphabetical position of a letter, or nil if the letter is not
       found."
      (let ((letters "ABCDEFGHIJKLMNOPQRSTUVWXYZ")
            (uc-letter (char-upcase letter)))
        (dotimes (i (array-dimension letters 0))
          (when (char-equal uc-letter (aref letters i))
            (return (1+ i))))))
    
    (defun alphabetical-position-to-letter (a-number)
      "Return the letter at that alphabetical position, or nil if the position is
       invalid."
      (let ((letters "ABCDEFGHIJKLMNOPQRSTUVWXYZ")
            (index (1- a-number)))
        (when (array-in-bounds-p letters index)
          (aref letters index))))
    
    (defun sum-alphabetic-positions (a-string)
      "Returns the sum of the alphabetical positions of the letters in the string
       argument."
      (reduce #'+
              (map 'list
                    #'letter-to-alphabetical-position
                    a-string)))
    
    (defun calculate-triangle-number (a-number)
      "Calculates Triangle Number N."
      (/ (* a-number (1+ a-number)) 2))
    
    (defun read-comma-delimited-file (filename)
      "Reads a comma-separated list of strings (double quotes required) from
       FILENAME, returning a list of strings."
      (let ((words (mapcan #'(lambda (x) (nsubstitute #\  #\, x))
                           (read-whole-file filename))))
        (read-from-string (concatenate 'string "(" words ")" ))))
    
    (defun read-whole-file (filename)
      "Reads all of filename with #'read-line, returning a list of lines."
      (with-open-file (file filename)
        (do ((lines '())
             (line (read-line file nil nil)
                   (read-line file nil nil)))
            ((not line) (nreverse lines))
          (push line lines))))

[[!tag LISP Project_Euler programming]]
