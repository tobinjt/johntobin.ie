I've been solving these problems faster than I've been posting them, so there
are four new solutions today.

[The sixth Project Euler
problem:](http://projecteuler.net/index.php?section=problems&id=6)

> The sum of the squares of the first ten natural numbers is,
> 1^(2) + 2^(2) + ... + 10^(2) = 385
>
> The square of the sum of the first ten natural numbers is,
> (1 + 2 + ... + 10)^(2) = 55^(2) = 3025
>
> Hence the difference between the sum of the squares of the first ten natural
> numbers and the square of the sum is 3025 âˆ’ 385 = 2640.
>
> Find the difference between the sum of the squares of the first one hundred
> natural numbers and the square of the sum.

This problem can be solved by brute force, a more elegant solution is possible.
I remembered from Leaving Cert Maths that *sum i from 1 to n* is *(n + 1)/2* but
I couldn't remember the formula for *sum i^2 from 1 to n* - thankfully [Wikipedia
provided the answer](http://en.wikipedia.org/wiki/Sum): *n(n + 1)(2n + 1)/6*

I'm sure that some of the other problems I tackle with brute force have an
elegant mathematical solution; the forum thread for each problem is a good
source of knowledge.  One of the reasons I'm enjoying these problems is that
most of my programming is text processing, but these problems are different.

My LISP solution:

    (defun project-euler-6-1 ()
      (let*
        (
          (n 100)
    
          (sum-n (/ (* n (1+ n)) 2))
          (square-sum-n (expt sum-n 2))
    
          ; n(n + 1)(2n + 1)/6
          ; http://en.wikipedia.org/wiki/Sum
          (sum-squares (/ (* n (1+ n) (1+ (* n 2))) 6))
        )
    
        (- square-sum-n sum-squares)
      )
    
    )

[[!tag LISP Project_Euler programming]]
