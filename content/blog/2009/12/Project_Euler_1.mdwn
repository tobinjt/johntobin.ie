I've taken a break from computer stuff over my Christmas holidays, but I'm
feeling the urge again, so I'm writing some more LISP.  I've decided to tackle
the problems in [Project Euler](http://projecteuler.net/); most are mathematical
problems, whereas I typically write text-processing programs, but they should
still help my LISP.

Here's [the first
problem:](http://projecteuler.net/index.php?section=problems&id=1)

> If we list all the natural numbers below 10 that are multiples of 3 or 5, we
> get 3, 5, 6 and 9. The sum of these multiples is 23.
>
> Find the sum of all the multiples of 3 or 5 below 1000.

Here's my solution:


    (defun project-euler-1-1 ()
      (let ((total 0))
        (dotimes (current-number 1000 total)
          (cond
            ((zerop (mod current-number 3)) (setf total (+ total current-number)))
            ((zerop (mod current-number 5)) (setf total (+ total current-number)))
          )
        )
      )
    )

The answer is 233168.

I don't know whether this is idiomatic LISP or not; I suspect it's Perl, written
in LISP syntax.  Here's my Perl solution:

    use strict;
    use warnings;
    use List::Util qw(sum);
    
    my @numbers = grep { ($_ % 3 == 0) or  ($_ % 5 == 0) } 1 .. 999;
    print sum(@numbers), "\n";

[[!tag lisp project_euler programming]]
