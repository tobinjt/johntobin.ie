[Project Euler problem
55:](http://projecteuler.net/index.php?section=problems&id=55)

> If we take 47, reverse and add, 47 + 74 = 121, which is palindromic.
>
> Not all numbers produce palindromes so quickly. For example,
>
> 349 + 943 = 1292,
> 1292 + 2921 = 4213
> 4213 + 3124 = 7337
>
> That is, 349 took three iterations to arrive at a palindrome.
>
> Although no one has proved it yet, it is thought that some numbers, like 196,
> never produce a palindrome. A number that never forms a palindrome through the
> reverse and add process is called a Lychrel number. Due to the theoretical
> nature of these numbers, and for the purpose of this problem, we shall assume
> that a number is Lychrel until proven otherwise. In addition you are given
> that for every number below ten-thousand, it will either (i) become a
> palindrome in less than fifty iterations, or, (ii) no one, with all the
> computing power that exists, has managed so far to map it to a palindrome. In
> fact, 10677 is the first number to be shown to require over fifty iterations
> before producing a palindrome: 4668731596684224866951378664 (53 iterations,
> 28-digits).
>
> Surprisingly, there are palindromic numbers that are themselves Lychrel
> numbers; the first example is 4994.
>
> How many Lychrel numbers are there below ten-thousand?
>
> NOTE: Wording was modified slightly on 24 April 2007 to emphasise the
> theoretical nature of Lychrel numbers.

Here's my LISP solution:

    (defun is-palindromic-number (a-number)
      (= a-number (reverse-number a-number)))

    (defun reverse-number (a-number)
      (digits-to-number (reverse (number-to-digits a-number))))

    (defun is-lychrel-number (a-number)
      (let ((current-candidate (+ a-number (reverse-number a-number))))
        (block test
          ; We've already completed one iteration, and we're allowed 'less than
          ; 50 iterations'.
          (dofromto (1 48 i)
            (when (is-palindromic-number current-candidate)
              (return-from test nil))
            (setf current-candidate (+ current-candidate
                                      (reverse-number current-candidate))))
          t)))

    (defun project-euler-55-1 ()
      (let ((num-lychrel-numbers 0))
        (dofromto (1 9999 current-number num-lychrel-numbers)
          (when (is-lychrel-number current-number)
            (incf num-lychrel-numbers)))))

[[!tag LISP Project_Euler programming]]
