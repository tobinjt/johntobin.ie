[Project Euler problem
57:](http://projecteuler.net/index.php?section=problems&id=57)

> It is possible to show that the square root of two can be expressed as an
> infinite continued fraction.
>
>  sqrt(2) = 1 + 1/(2 + 1/(2 + 1/(2 + ... ))) = 1.414213...
>
>  By expanding this for the first four iterations, we get:
>
>     1 + 1/2 = 3/2 = 1.5
>     1 + 1/(2 + 1/2) = 7/5 = 1.4
>     1 + 1/(2 + 1/(2 + 1/2)) = 17/12 = 1.41666...
>     1 + 1/(2 + 1/(2 + 1/(2 + 1/2))) = 41/29 = 1.41379...
>
> The next three expansions are 99/70, 239/169, and 577/408, but the eighth
> expansion, 1393/985, is the first example where the number of digits in the
> numerator exceeds the number of digits in the denominator.
>
> In the first one-thousand expansions, how many fractions contain a numerator
> with more digits than denominator?

Reformatting and extending the description gives:

    1 +                      1/2    =  3/2  = 1.5        = 1 +  1/2
    1 +               1/(2 + 1/2)   =  7/5  = 1.4        = 1 +  2/5
    1 +        1/(2 + 1/(2 + 1/2))  = 17/12 = 1.41666... = 1 +  5/12
    1 + 1/(2 + 1/(2 + 1/(2 + 1/2))) = 41/29 = 1.41379... = 1 + 12/29

Calculating the portion after the + is easy:

    numerator(1)   = 1
    denominator(1) = 2
    numerator(n)   = denominator(n-1)
    denominator(n) = numerator(n-1) + (2 * denominator(n-1))

`(1 + numerator/denominator) = (numerator + denominator)/denominator`, so we
just compare `num-digits(numerator + denominator)` against
`num-digits(denominator)`.

Here's my LISP solution:

    (defun project-euler-57-1 ()
      ; numerator and denominator are functions, but they're also the best names for
      ; the variables, so I'm using them.
      (let ((numerator 1)
            (denominator 2)
            (result 0))
        (dofromto (2 1000 i result)
          (psetf numerator denominator
                 denominator (+ numerator (* 2 denominator)))
          (when (> (length (write-to-string (+ numerator denominator)))
                   (length (write-to-string denominator)))
            (incf result)))))


[[!tag LISP Project_Euler programming]]
