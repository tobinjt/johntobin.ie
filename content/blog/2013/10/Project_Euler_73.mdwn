[Project Euler problem 73:](http://projecteuler.net/problem=73)

> Consider the fraction, n/d, where n and d are positive integers. If n < d and
> HCF(n,d)=1, it is called a reduced proper fraction.
>
> If we list the set of reduced proper fractions for d <= 8 in ascending order of
> size, we get:
>
> 1/8, 1/7, 1/6, 1/5, 1/4, 2/7, 1/3, 3/8, 2/5, 3/7, 1/2, 4/7, 3/5, 5/8, 2/3,
> 5/7, 3/4, 4/5, 5/6, 6/7, 7/8
>
> It can be seen that there are 3 fractions between 1/3 and 1/2.
>
> How many fractions lie between 1/3 and 1/2 in the sorted set of reduced proper
> fractions for d <= 12,000?


Here's my Go solution:

    func projectEuler73actual(n int64) int64 {
    	count := int64(0)
    	lower := big.NewRat(1, 3)
    	upper := big.NewRat(1, 2)
    	current := big.NewRat(1, 1)
    	// Use Farey Sequences (http://en.wikipedia.org/wiki/Farey_sequence)
    	// This is taken mostly-unchanged from Wikipedia.
    	var a, b, c, d int64
    	a, b, c, d = 0, 1, 1, n
    	for c <= n {
    		k := int64((n + b) / d)
    		a, b, c, d = c, d, k*c-a, k*d-b
    		current.Num().SetInt64(a)
    		current.Denom().SetInt64(b)
    		if lower.Cmp(current) == -1 && upper.Cmp(current) == 1 {
    			count++
    		}
    	}
    	return count
    }

    func projectEuler73test() int64 {
    	return projectEuler73actual(8)
    }

    func projectEuler73() int64 {
    	return projectEuler73actual(12000)
    }

[[!tag Golang Project_Euler programming]]
