[Project Euler problem 67:](http://projecteuler.net/problem=67)

> By starting at the top of the triangle below and moving to adjacent numbers on
> the row below, the maximum total from top to bottom is 23.
>
> 3
> 7 4
> 2 4 6
> 8 5 9 3
>
> That is, 3 + 7 + 4 + 9 = 23.
>
> Find the maximum total from top to bottom in triangle.txt (right click and
> 'Save Link/Target As...'), a 15K text file containing a triangle with
> one-hundred rows.
>
> NOTE: This is a much more difficult version of Problem 18. It is not possible
> to try every route to solve this problem, as there are 2**99 altogether! If
> you could check one trillion (1012) routes every second it would take over
> twenty billion years to check them all. There is an efficient algorithm to
> solve it.  ;o)

Here's my Go solution:

    func parseTriangle(fh io.Reader) ([][]int, error) {
    	bfh := bufio.NewReader(fh)
    	triangle := make([][]int, 0)
    	for {
    		line, err := bfh.ReadString(byte('\n'))
    		if err != nil && len(line) > 0 {
    			// Incomplete read
    			return nil, err
    		}
    		if err != nil {
    			break
    		}
    		line = strings.TrimRight(line, "\n")
    		numbers := make([]int, 0)
    		for _, ascii_number := range strings.Fields(line) {
    			parsed_number, err := strconv.Atoi(ascii_number)
    			if err != nil {
    				// Parsing error
    				return nil, err
    			}
    			numbers = append(numbers, parsed_number)
    		}
    		triangle = append(triangle, numbers)
    	}
    	return triangle, nil
    }

    func projectEuler67() int64 {
    	fh, err := os.Open("triangle.txt")
    	if err != nil {
    		log.Fatal(err)
    	}
    	defer fh.Close()
    	triangle, err := parseTriangle(fh)
    	if err != nil {
    		log.Fatalln(err)
    	}
    	// Start at the second last row and work upwards.
    	for i := len(triangle) - 2; i >= 0; i-- {
    		for j := 0; j <= i; j++ {
    			left, right := triangle[i+1][j], triangle[i+1][j+1]
    			if left > right {
    				triangle[i][j] += left
    			} else {
    				triangle[i][j] += right
    			}
    		}
    	}
    	return int64(triangle[0][0])
    }

[[!tag Go Project_Euler programming]]
