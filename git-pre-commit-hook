#!/bin/bash

set -e -u -o pipefail

markdown_files_being_committed() {
  git diff --cached --name-only --diff-filter=ACM \
    | (grep ^content/blog || true)
}

# Hugo doesn't publish drafts, so prevent checking in draft content.
check_for_drafts() {
  local drafts_found=0 file
  for file in $(markdown_files_being_committed); do
    if grep -H --color=auto '^draft.*=.*true' "${file}"; then
      drafts_found=1
    fi
  done
  if [[ "${drafts_found}" -eq 1 ]]; then
    printf "draft entries found\\n" >&2
  fi
  return "${drafts_found}"
}

# When tags are inconsistently capitalised Hugo will use a random tag, causing
# unnecessary changes in output.  Prevent checking in inconsistent tags.
check_for_inconsistent_tags() {
  local bad_tags
  bad_tags="$(make --quiet tags_list \
                | awk '{print tolower($2)}' \
                | sort \
                | uniq -d)"
  if [[ -z "${bad_tags}" ]]; then
    return 0
  fi
  printf "Inconsistent tag capitalisation found: %s\\n" "${bad_tags}"
  return 1
}

check_for_unstaged_changes() {
  # The output of `git status --porcelain` looks like:
  # ```
  # M  content/blog/Python_development.md
  #  M git-pre-commit-hook
  # ```
  # Files with all changes staged for commit will have a space as the second
  # character, so filter those out; anything remaining is an unstaged change and
  # an error, because the other tests aren't accurate.  If I want to make
  # multiple commits I need to stash the changes with `git stash push
  # --keep-index` so they don't show up.
  local output
  output="$(git status --porcelain | grep -v '^. ')"
  if [[ -z "${output}" ]]; then
    return 0
  fi
  # Use human readable git status because it's more familiar.
  printf "Uncommitted changes\\n" >&2
  # I don't want process substitution, I want the command in backtics.
  # shellcheck disable=SC2016
  printf 'Either stage for commit with `git add` or stash temporarily with'
  # shellcheck disable=SC2016
  printf ' `git stash push --keep-index`\n\n'
  git status >&2
  return 1
}

main() {
  local exit_status=0

  if ! check_for_unstaged_changes; then
    exit_status=1
  fi

  if ! check_for_drafts; then
    exit_status=1
  fi

  if ! check_for_inconsistent_tags; then
    exit_status=1
  fi

  exit "${exit_status}"
}

main
